[{"C:\\Users\\steve\\Documents\\frontend training\\shopping-cart-react\\react-shopping-cart\\src\\index.js":"1","C:\\Users\\steve\\Documents\\frontend training\\shopping-cart-react\\react-shopping-cart\\src\\App.js":"2","C:\\Users\\steve\\Documents\\frontend training\\shopping-cart-react\\react-shopping-cart\\src\\reportWebVitals.js":"3","C:\\Users\\steve\\Documents\\frontend training\\shopping-cart-react\\react-shopping-cart\\src\\context\\shop-context.jsx":"4","C:\\Users\\steve\\Documents\\frontend training\\shopping-cart-react\\react-shopping-cart\\src\\components\\navbar.jsx":"5","C:\\Users\\steve\\Documents\\frontend training\\shopping-cart-react\\react-shopping-cart\\src\\pages\\shop\\shop.jsx":"6","C:\\Users\\steve\\Documents\\frontend training\\shopping-cart-react\\react-shopping-cart\\src\\pages\\cart\\cart.jsx":"7","C:\\Users\\steve\\Documents\\frontend training\\shopping-cart-react\\react-shopping-cart\\src\\products.js":"8","C:\\Users\\steve\\Documents\\frontend training\\shopping-cart-react\\react-shopping-cart\\src\\pages\\shop\\product.jsx":"9","C:\\Users\\steve\\Documents\\frontend training\\shopping-cart-react\\react-shopping-cart\\src\\pages\\cart\\cart-item.jsx":"10"},{"size":535,"mtime":1675776457089,"results":"11","hashOfConfig":"12"},{"size":634,"mtime":1675951032680,"results":"13","hashOfConfig":"12"},{"size":362,"mtime":1675776457198,"results":"14","hashOfConfig":"12"},{"size":1350,"mtime":1676137996447,"results":"15","hashOfConfig":"12"},{"size":441,"mtime":1675778646806,"results":"16","hashOfConfig":"12"},{"size":442,"mtime":1675944556683,"results":"17","hashOfConfig":"12"},{"size":1072,"mtime":1676138051377,"results":"18","hashOfConfig":"12"},{"size":1329,"mtime":1676138132452,"results":"19","hashOfConfig":"12"},{"size":703,"mtime":1675959164712,"results":"20","hashOfConfig":"12"},{"size":872,"mtime":1676117947987,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1ltx2nv",{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54"},"C:\\Users\\steve\\Documents\\frontend training\\shopping-cart-react\\react-shopping-cart\\src\\index.js",[],[],"C:\\Users\\steve\\Documents\\frontend training\\shopping-cart-react\\react-shopping-cart\\src\\App.js",[],[],"C:\\Users\\steve\\Documents\\frontend training\\shopping-cart-react\\react-shopping-cart\\src\\reportWebVitals.js",[],[],"C:\\Users\\steve\\Documents\\frontend training\\shopping-cart-react\\react-shopping-cart\\src\\context\\shop-context.jsx",[],[],"C:\\Users\\steve\\Documents\\frontend training\\shopping-cart-react\\react-shopping-cart\\src\\components\\navbar.jsx",[],[],"C:\\Users\\steve\\Documents\\frontend training\\shopping-cart-react\\react-shopping-cart\\src\\pages\\shop\\shop.jsx",[],[],"C:\\Users\\steve\\Documents\\frontend training\\shopping-cart-react\\react-shopping-cart\\src\\pages\\cart\\cart.jsx",["55"],[],"import React, { useContext } from \"react\";\r\nimport { PRODUCTS } from \"../../products\";\r\nimport { ShopContext } from \"../../context/shop-context\";\r\nimport { CartItem } from \"./cart-item\";\r\nimport \"./cart.css\";\r\n\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nexport const Cart = () => {\r\n  const { cartItems, getTotalCartAmount } = useContext(ShopContext);\r\n  const totalAmount = getTotalCartAmount();\r\n\r\n  const navigate = useNavigate();\r\n  return (\r\n    <div className=\"cart\">\r\n      <div>\r\n        <h1>Your Cart Items</h1>\r\n      </div>\r\n      <div className=\"cartItems\">\r\n        {PRODUCTS.map((product) => {\r\n          if (cartItems[product.id] !== 0) {\r\n            return <CartItem data={product} />;\r\n          }\r\n        })}\r\n      </div>\r\n      {totalAmount > 0 ? (\r\n        <div className=\"checkout\">\r\n          <p>Subtotal: ${totalAmount}</p>\r\n          <button onClick={() => navigate(\"/\")}>Continue SHopping</button>\r\n          <button>Checkout</button>\r\n        </div>\r\n      ) : (\r\n        <h1> Your Cart is Empty</h1>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","C:\\Users\\steve\\Documents\\frontend training\\shopping-cart-react\\react-shopping-cart\\src\\products.js",[],[],"C:\\Users\\steve\\Documents\\frontend training\\shopping-cart-react\\react-shopping-cart\\src\\pages\\shop\\product.jsx",["56"],[],"import React, { useContext } from \"react\";\r\nimport { ShopContext } from \"../../context/shop-context\";\r\n\r\nexport const Product = (props) => {\r\n  const { id, productName, price, productImage } = props.data;\r\n  const { addToCart, cartItems } = useContext(ShopContext);\r\n\r\n  const cartItemAmount = cartItems[id];\r\n  return (\r\n    <div className=\"product\">\r\n      <img src={productImage} />\r\n      <div className=\"description\">\r\n        <p>\r\n          <b>{productName}</b>\r\n        </p>\r\n        <p>${price}</p>\r\n      </div>\r\n      <button className=\"addToCartBttn\" onClick={() => addToCart(id)}>\r\n        Add To Cart {cartItemAmount > 0 && <> ({cartItemAmount})</>}\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n","C:\\Users\\steve\\Documents\\frontend training\\shopping-cart-react\\react-shopping-cart\\src\\pages\\cart\\cart-item.jsx",["57"],[],"import React, { useContext } from \"react\";\r\nimport { ShopContext } from \"../../context/shop-context\";\r\n\r\nexport const CartItem = (props) => {\r\n  const { id, productName, price, productImage } = props.data;\r\n  const { cartItems, addToCart, removeFromCart, updateCartItemCount } =\r\n    useContext(ShopContext);\r\n  return (\r\n    <div className=\"cartItem\">\r\n      <img src={productImage} />\r\n      <div className=\"description\">\r\n        <p>\r\n          <b>{productName}</b>\r\n        </p>\r\n        <p>${price}</p>\r\n        <div className=\"countHandler\">\r\n          <button onClick={() => removeFromCart(id)}>-</button>\r\n          <input\r\n            value={cartItems[id]}\r\n            onChange={(e) => updateCartItemCount(Number(e.target.value), id)}\r\n          />\r\n          <button onClick={() => addToCart(id)}>+</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n",{"ruleId":"58","severity":1,"message":"59","line":20,"column":33,"nodeType":"60","messageId":"61","endLine":20,"endColumn":35},{"ruleId":"62","severity":1,"message":"63","line":11,"column":7,"nodeType":"64","endLine":11,"endColumn":33},{"ruleId":"62","severity":1,"message":"63","line":10,"column":7,"nodeType":"64","endLine":10,"endColumn":33},"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement"]